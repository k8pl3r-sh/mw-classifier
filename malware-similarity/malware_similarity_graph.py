#!/usr/bin/python3
import argparse
import os
import networkx
from networkx.drawing.nx_agraph import write_dot
import itertools

"""
Script which reads a directory of malware samples, extracts strings from them, 
and then builds a similarity graph from those samples based on the Jaccard index.
Based on Malware Data Science by Joshua Saxe and Hillary Sanders
To see convenably the dot file : https://dreampuf.github.io/GraphvizOnline/
And select the Engine Circo
"""

def jaccard(set1, set2):
    """
    Compute the Jaccard distance between two sets [0,1]
    """
    intersect = set1.intersection(set2)
    intersect_length = float(len(intersect))
    union = set1.union(set2)
    union_length = float(len(union))
    return intersect_length / union_length

def get_strings(fullpath):
    """
    Extract strings from the binary indicated by the 'fullpath'
    parameter, and then return the set of unique strings in
    the binary.
    """
    strings = os.popen("strings '{0}'".format(fullpath)).read()
    strings = set(strings.split("\n"))
    return strings

def pe_check(fullpath):
    """
    Do a cursory sanity check to make sure 'fullpath' is
    a Windows PE executable (PE executables start with the
    two bytes 'MZ')
    """
    with open(fullpath, 'rb') as file:
        return file.read(2) == b'MZ'

def main(args):
    # Do the main work : finding PE binaries in the target directory, extract features, and build the graph
    malware_paths = []  # where we'll store the malware file paths
    malware_attributes = dict()  # where we'll store the malware strings
    graph = networkx.Graph()  # the similarity graph

    for root, dirs, paths in os.walk(args.target_directory):
        for path in paths:
            fullpath = os.path.join(root, path)
            if pe_check(fullpath):
                malware_paths.append(fullpath)
                malware_attributes[fullpath] = get_strings(fullpath)

    for malware1, malware2 in itertools.combinations(malware_paths, 2):
        jaccard_index = jaccard(malware_attributes[malware1], malware_attributes[malware2])
        if jaccard_index > args.threshold:
            # print(malware1, malware2, jaccard_index)
            graph.add_edge(malware1, malware2, weight=jaccard_index)

    write_dot(graph, args.output_dot_file)
    print("Graph saved to", args.output_dot_file)
    print("Use https://dreampuf.github.io/GraphvizOnline/ to visualize the graph with circo engine")

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="Identify similarities between malware samples based on strings and build similarity graph"
    )

    parser.add_argument(
        "target_directory",
        help="Directory containing malware"
    )

    parser.add_argument(
        "output_dot_file",
        help="Where to save the output graph DOT file"
    )

    parser.add_argument(
        "--jaccard_index_threshold","-j",dest="threshold",type=float,
        default=0.8,help="Threshold above which to create an 'edge' between samples"
    )

    args = parser.parse_args()

    main(args)