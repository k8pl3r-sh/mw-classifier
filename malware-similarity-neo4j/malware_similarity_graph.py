#!/usr/bin/python3
import argparse
import os
from utils.tools import load_yml
from utils.neo4j_graph import *
from neo4j import GraphDatabase
from features.strings import get_strings


def pe_check(fullpath: str) -> bool:
    """
    Do a cursory sanity check to make sure 'fullpath' is
    a Windows PE executable (PE executables start with the
    two bytes 'MZ')
    """
    with open(fullpath, 'rb') as file:
        return file.read(2) == b'MZ'


def filename_from_path(path: str) -> str:
    return os.path.basename(path)


def main(args_):
    config = load_yml("config.yml")
    uri = config['neo4j']['uri']
    auth = (config['neo4j']['user'], config['neo4j']['password'])

    # Do the main work : finding PE binaries in the target directory, extract features, and build the graph
    malware_paths = []  # where we'll store the malware file paths
    malware_attributes = dict()  # where we'll store the malware strings

    for root, dirs, paths in os.walk(args_.target_directory):
        for path in paths:
            fullpath = os.path.join(root, path)
            if pe_check(fullpath):
                filename = filename_from_path(fullpath)
                malware_paths.append(filename)
                malware_attributes[filename] = get_strings(fullpath)

    # Connect to Neo4j
    driver = GraphDatabase.driver(uri, auth=auth)

    with driver.session() as session:
        # Create nodes
        for path in malware_paths:
            session.execute_write(create_node, path)

        # Create relationships based on the Jaccard index
        for malware1, malware2 in itertools.combinations(malware_paths, 2):
            jaccard_index = jaccard(malware_attributes[malware1], malware_attributes[malware2])
            if jaccard_index > args.threshold:
                session.execute_write(create_relationship, malware1, malware2, jaccard_index)

    driver.close()
    print("Graph exported to Neo4j database")

    if args.save:
        save_graph_as_cypher(malware_paths, malware_attributes, args.threshold)
    print("Neo4J instance is accessible at http://localhost:7474/browser/")


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="Identify similarities between malware samples based on strings and build similarity graph"
    )
    parser.add_argument(
        "target_directory",
        help="Directory containing malware"
    )
    parser.add_argument(
        "--jaccard_index_threshold", "-j", dest="threshold", type=float,
        default=0.8, help="Threshold above which to create an 'edge' between samples"
    )
    parser.add_argument(
        "--save-file", "-s", action='store_true', dest="save", help="Save the database into a file"
    )

    args = parser.parse_args()
    main(args)
