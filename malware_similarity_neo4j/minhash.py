import mmh3
import numpy as np

class MinHash:
    def __init__(self, num_hashes=200):
        self.num_hashes = num_hashes
        # Generate a set of random seeds for hash functions
        self.seeds = np.random.randint(0, 2**32, size=num_hashes)

    def _hash(self, x, seed):
        # Apply mmh3 hash function with a given seed
        return mmh3.hash(x, seed) & 0xFFFFFFFF

    def compute_signature(self, items):
        # Initialize the signature with infinity
        signature = np.full(self.num_hashes, np.inf)
        for item in items:
            for i, seed in enumerate(self.seeds):
                hash_value = self._hash(item, seed)
                if hash_value < signature[i]:
                    signature[i] = hash_value
        return signature

    def jaccard_index(self, set1, set2):
        # Compute MinHash signatures for both sets
        sig1 = self.compute_signature(set1)
        sig2 = self.compute_signature(set2)
        # Estimate Jaccard similarity based on the signatures
        return np.mean(sig1 == sig2)

# Example usage:
set1 = {'string1', 'string2', 'string3'}
set2 = {'string2', 'string4'}

# Create MinHash instance with 200 hash functions
minhash = MinHash(num_hashes=200)

# Compute the Jaccard similarity
similarity = minhash.jaccard_index(set1, set2)
print(f"MinHash Jaccard Similarity: {similarity}")
